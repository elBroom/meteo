// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schema

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCef4e921DecodeGithubComElBroomMeteoAppSchema(in *jlexer.Lexer, out *Indication) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = float64(in.Float64())
		case "pin":
			out.Pin = string(in.String())
		case "create_date":
			out.CreateDate = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComElBroomMeteoAppSchema(out *jwriter.Writer, in Indication) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value\":")
	out.Float64(float64(in.Value))
	if in.Pin != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pin\":")
		out.String(string(in.Pin))
	}
	if in.CreateDate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"create_date\":")
		out.Int64(int64(in.CreateDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Indication) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComElBroomMeteoAppSchema(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Indication) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComElBroomMeteoAppSchema(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Indication) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComElBroomMeteoAppSchema(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Indication) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComElBroomMeteoAppSchema(l, v)
}
func easyjsonCef4e921DecodeGithubComElBroomMeteoAppSchema1(in *jlexer.Lexer, out *DisignationList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DisignationList, 0, 1)
			} else {
				*out = DisignationList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Disignation
			if data := in.Raw(); in.Ok() {
				in.AddError((v1).UnmarshalJSON(data))
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComElBroomMeteoAppSchema1(out *jwriter.Writer, in DisignationList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.Raw((v3).MarshalJSON())
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DisignationList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComElBroomMeteoAppSchema1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DisignationList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComElBroomMeteoAppSchema1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DisignationList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComElBroomMeteoAppSchema1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DisignationList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComElBroomMeteoAppSchema1(l, v)
}
func easyjsonCef4e921DecodeGithubComElBroomMeteoAppSchema2(in *jlexer.Lexer, out *Disignation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "color":
			out.Color = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([][]interface{}, 0, 2)
					} else {
						out.Data = [][]interface{}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 []interface{}
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make([]interface{}, 0, 4)
							} else {
								v4 = []interface{}{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 interface{}
							if m, ok := v5.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v5.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v5 = in.Interface()
							}
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pin":
			out.Pin = string(in.String())
		case "unit":
			out.Unit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComElBroomMeteoAppSchema2(out *jwriter.Writer, in Disignation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Color != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"color\":")
		out.String(string(in.Color))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.Data {
			if v6 > 0 {
				out.RawByte(',')
			}
			if v7 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v8, v9 := range v7 {
					if v8 > 0 {
						out.RawByte(',')
					}
					if m, ok := v9.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v9.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v9))
					}
				}
				out.RawByte(']')
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pin\":")
	out.String(string(in.Pin))
	if in.Unit != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"unit\":")
		out.String(string(in.Unit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Disignation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComElBroomMeteoAppSchema2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Disignation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComElBroomMeteoAppSchema2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Disignation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComElBroomMeteoAppSchema2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Disignation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComElBroomMeteoAppSchema2(l, v)
}
